nimTitle	channels	channels.html	module threading/channels		0
nim	Chan	channels.html#Chan	object Chan		239
nim	`=destroy`	channels.html#=destroy,Chan[T]	proc `=destroy`[T](c: Chan[T])		243
nim	`=copy`	channels.html#=copy,Chan[T],Chan[T]	proc `=copy`[T](dest: var Chan[T]; src: Chan[T])		259
nim	trySend	channels.html#trySend,Chan[T],sinkIsolated[T]	proc trySend[T](c: Chan[T]; src: sink Isolated[T]): bool		268
nim	trySend	channels.html#trySend.t,Chan[T],T	template trySend[T](c: Chan[T]; src: T): bool		275
nim	tryRecv	channels.html#tryRecv,Chan[T],T	proc tryRecv[T](c: Chan[T]; dst: var T): bool		279
nim	send	channels.html#send,Chan[T],sinkIsolated[T]	proc send[T](c: Chan[T]; src: sink Isolated[T])		283
nim	send	channels.html#send.t,Chan[T],T	template send[T](c: Chan[T]; src: T)		291
nim	recv	channels.html#recv,Chan[T],T	proc recv[T](c: Chan[T]; dst: var T)		295
nim	recv	channels.html#recv,Chan[T]	proc recv[T](c: Chan[T]): T		299
nim	recvIso	channels.html#recvIso,Chan[T]	proc recvIso[T](c: Chan[T]): Isolated[T]		303
nim	peek	channels.html#peek,Chan[T]	proc peek[T](c: Chan[T]): int		308
nim	newChan	channels.html#newChan,Positive	proc newChan[T](elements: Positive = 30): Chan[T]		312
nimgrp	recv	channels.html#recv-procs-all	proc		295
